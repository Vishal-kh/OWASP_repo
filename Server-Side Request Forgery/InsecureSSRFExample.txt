// In a non-compliant scenario, the application directly uses the user-provided URL without any validation or filtering, making it vulnerable to SSRF attacks.

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class InsecureSSRFExample {

   public static void main(String[] args) {
       String userProvidedUrl = "http://localhost/admin";  // An example of an attacker's input

       try {
           // Insecure: Directly using the user-provided URL
           URL url = new URL(userProvidedUrl);
           HttpURLConnection connection = (HttpURLConnection) url.openConnection();
           connection.setRequestMethod("GET");

           BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
           String inputLine;
           StringBuilder content = new StringBuilder();

           while ((inputLine = in.readLine()) != null) {
               content.append(inputLine);
           }

           in.close();
           connection.disconnect();

           System.out.println("Fetched content: " + content.toString());
       } catch (Exception e) {
           e.printStackTrace();
       }
   }
}
